/**
 * Tencent is pleased to support the open source community by making Tars available.
 *
 * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

module tars
{
    struct LogInfo
    {
        //Application name
        0  require  string appname;
        //Service name
        1  require  string servername;
        //Log file name
        2  require  string sFilename;
        //Time format
        3  require  string sFormat;
        //Set group name
        4  optional string setdivision;
        // Whether the log file name has a .log suffix
        5  optional bool   bHasSufix         = true;
        // Whether to allow the framework to add business-related identifiers to log file names
        6  optional bool   bHasAppNamePrefix = true;
        // Whether the [] symbol added to the date and time part of the framework
        7  optional bool   bHasSquareBracket = false;
        // The connector between the user-defined character and the date character in the log file name, the default is "_"
        8  optional string sConcatStr        = "_";
        // The separator between log content items, the default is "|"
        9  optional string sSepar            = "|";
        // Record type when outputting logs by day / hour / minute, for example, by one day: day or 1day; by two hours: 2hour; by 10 minutes: 10minute
        10 optional string sLogType          = "";
    };
    interface Log
    {
        /**
         * Record remote logs
         * @param app, Application Name
         * @param server, Service name
         * @param file, File name
         * @param format, Log time format(%Y%m%d)
         * @param buffer, Log content
         */
        void loggerInnerImpl(string app, string server, string file, string format, vector<string> buffer);

        /**
         * Record remote logs
         * @param info, LogInfo
         * @param buffer, Log content
         */
        void loggerbyInfo(LogInfo info, vector<string> buffer);
    };
};
